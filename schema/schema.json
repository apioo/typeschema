{
  "definitions": {
    "CommonProperties": {
      "description": "Common properties which can be used at any schema",
      "type": "object",
      "properties": {
        "title": {
          "description": "Distinct word which represents this schema",
          "type": "string"
        },
        "description": {
          "description": "General description of this schema, should not contain any new lines.",
          "type": "string"
        },
        "type": {
          "description": "JSON type of the property",
          "type": "string",
          "enum": [
            "object",
            "array",
            "boolean",
            "integer",
            "number",
            "string"
          ]
        },
        "nullable": {
          "description": "Indicates whether it is possible to use a null value",
          "type": "boolean",
          "default": false
        },
        "deprecated": {
          "description": "Indicates whether this schema is deprecated",
          "type": "boolean",
          "default": false
        },
        "readonly": {
          "description": "Indicates whether this schema is readonly",
          "type": "boolean",
          "default": false
        }
      }
    },

    "ScalarProperties": {
      "type": "object",
      "properties": {
        "format": {
          "description": "Describes the specific format of this type i.e. date-time or int64",
          "type": "string"
        },
        "enum": {
          "$ref": "#/definitions/EnumValue"
        },
        "default": {
          "$ref": "#/definitions/ScalarValue"
        }
      }
    },

    "PropertyValue": {
      "description": "Allowed values of an object property",
      "oneOf": [
        {
          "$ref": "#/definitions/BooleanType"
        },
        {
          "$ref": "#/definitions/NumberType"
        },
        {
          "$ref": "#/definitions/StringType"
        },
        {
          "$ref": "#/definitions/ArrayType"
        },
        {
          "$ref": "#/definitions/CombinationType"
        },
        {
          "$ref": "#/definitions/ReferenceType"
        },
        {
          "$ref": "#/definitions/GenericType"
        }
      ]
    },
    "Properties": {
      "description": "Properties of a schema",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/PropertyValue"
      }
    },
    "ContainerProperties": {
      "description": "Properties specific for a container",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "object"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "StructProperties": {
      "description": "Struct specific properties",
      "type": "object",
      "properties": {
        "$final": {
          "description": "Indicates that a struct is final, this means it is not possible to extend this struct",
          "type": "boolean"
        },
        "$extends": {
          "description": "Extends an existing type",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/Properties"
        },
        "required": {
          "$ref": "#/definitions/StringArray"
        }
      },
      "required": [
        "properties"
      ]
    },
    "StructType": {
      "description": "A struct contains a fix set of defined properties",
      "allOf": [
        {
          "$ref": "#/definitions/CommonProperties"
        },
        {
          "$ref": "#/definitions/ContainerProperties"
        },
        {
          "$ref": "#/definitions/StructProperties"
        }
      ]
    },
    "MapProperties": {
      "description": "Map specific properties",
      "type": "object",
      "properties": {
        "additionalProperties": {
          "$ref": "#/definitions/PropertyValue"
        },
        "maxProperties": {
          "description": "Positive integer value",
          "type": "integer",
          "minimum": 0
        },
        "minProperties": {
          "description": "Positive integer value",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [
        "additionalProperties"
      ]
    },
    "MapType": {
      "description": "A map contains variable key value entries of a specific type",
      "allOf": [
        {
          "$ref": "#/definitions/CommonProperties"
        },
        {
          "$ref": "#/definitions/ContainerProperties"
        },
        {
          "$ref": "#/definitions/MapProperties"
        }
      ]
    },
    "ObjectType": {
      "description": "An object represents either a struct or map type",
      "oneOf": [
        {
          "$ref": "#/definitions/StructType"
        },
        {
          "$ref": "#/definitions/MapType"
        }
      ]
    },

    "ArrayValue": {
      "description": "Allowed values of an array item",
      "oneOf": [
        {
          "$ref": "#/definitions/BooleanType"
        },
        {
          "$ref": "#/definitions/NumberType"
        },
        {
          "$ref": "#/definitions/StringType"
        },
        {
          "$ref": "#/definitions/ReferenceType"
        },
        {
          "$ref": "#/definitions/GenericType"
        }
      ]
    },
    "ArrayProperties": {
      "description": "Array properties",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "array"
          ]
        },
        "items": {
          "$ref": "#/definitions/ArrayValue"
        },
        "maxItems": {
          "description": "Positive integer value",
          "type": "integer",
          "minimum": 0
        },
        "minItems": {
          "description": "Positive integer value",
          "type": "integer",
          "minimum": 0
        },
        "uniqueItems": {
          "type": "boolean"
        }
      },
      "required": [
        "type",
        "items"
      ]
    },
    "ArrayType": {
      "description": "An array contains an ordered list of a specific type",
      "allOf": [
        {
          "$ref": "#/definitions/CommonProperties"
        },
        {
          "$ref": "#/definitions/ArrayProperties"
        }
      ]
    },

    "BooleanProperties": {
      "description": "Boolean properties",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "boolean"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "BooleanType": {
      "description": "Represents a boolean value",
      "allOf": [
        {
          "$ref": "#/definitions/CommonProperties"
        },
        {
          "$ref": "#/definitions/ScalarProperties"
        },
        {
          "$ref": "#/definitions/BooleanProperties"
        }
      ]
    },

    "NumberProperties": {
      "description": "Number properties",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "number",
            "integer"
          ]
        },
        "multipleOf": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": true
        },
        "maximum": {
          "type": "number"
        },
        "exclusiveMaximum": {
          "type": "boolean",
          "default": false
        },
        "minimum": {
          "type": "number"
        },
        "exclusiveMinimum": {
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "type"
      ]
    },
    "NumberType": {
      "description": "Represents a number value (contains also integer)",
      "allOf": [
        {
          "$ref": "#/definitions/CommonProperties"
        },
        {
          "$ref": "#/definitions/ScalarProperties"
        },
        {
          "$ref": "#/definitions/NumberProperties"
        }
      ]
    },

    "StringProperties": {
      "description": "String properties",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "string"
          ]
        },
        "maxLength": {
          "description": "Positive integer value",
          "type": "integer",
          "minimum": 0
        },
        "minLength": {
          "description": "Positive integer value",
          "type": "integer",
          "minimum": 0
        },
        "pattern": {
          "type": "string",
          "format": "regex"
        }
      },
      "required": [
        "type"
      ]
    },
    "StringType": {
      "description": "Represents a string value",
      "allOf": [
        {
          "$ref": "#/definitions/CommonProperties"
        },
        {
          "$ref": "#/definitions/ScalarProperties"
        },
        {
          "$ref": "#/definitions/StringProperties"
        }
      ]
    },

    "AllOfValue": {
      "description": "Allowed values in a combination schema",
      "oneOf": [
        {
          "$ref": "#/definitions/ReferenceType"
        }
      ]
    },
    "AllOfProperties": {
      "type": "object",
      "description": "An intersection type combines multiple schemas into one",
      "properties": {
        "description": {
          "type": "string"
        },
        "allOf": {
          "description": "Combination values",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllOfValue"
          }
        }
      },
      "required": [
        "allOf"
      ]
    },

    "DiscriminatorMapping": {
      "description": "An object to hold mappings between payload values and schema names or references",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "Discriminator": {
      "description": "Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description",
      "type": "object",
      "properties": {
        "propertyName": {
          "description": "The name of the property in the payload that will hold the discriminator value",
          "type": "string"
        },
        "mapping": {
          "$ref": "#/definitions/DiscriminatorMapping"
        }
      },
      "required": [
        "propertyName"
      ]
    },
    "OneOfValue": {
      "description": "Allowed values in a combination schema",
      "oneOf": [
        {
          "$ref": "#/definitions/NumberType"
        },
        {
          "$ref": "#/definitions/StringType"
        },
        {
          "$ref": "#/definitions/BooleanType"
        },
        {
          "$ref": "#/definitions/ReferenceType"
        }
      ]
    },
    "OneOfProperties": {
      "description": "An union type can contain one of the provided schemas",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "discriminator": {
          "$ref": "#/definitions/Discriminator"
        },
        "oneOf": {
          "description": "Combination values",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OneOfValue"
          }
        }
      },
      "required": [
        "oneOf"
      ]
    },
    "CombinationType": {
      "description": "A combination type is either a intersection or union type",
      "oneOf": [
        {
          "$ref": "#/definitions/AllOfProperties"
        },
        {
          "$ref": "#/definitions/OneOfProperties"
        }
      ]
    },

    "TemplateProperties": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "ReferenceType": {
      "description": "Represents a reference to another schema",
      "type": "object",
      "properties": {
        "$ref": {
          "description": "Reference to a schema under the definitions key",
          "type": "string"
        },
        "$template": {
          "description": "Optional concrete schema definitions which replace generic template types",
          "$ref": "#/definitions/TemplateProperties"
        }
      },
      "required": [
        "$ref"
      ]
    },
    "GenericType": {
      "description": "Represents a generic type",
      "type": "object",
      "properties": {
        "$generic": {
          "type": "string"
        }
      },
      "required": [
        "$generic"
      ]
    },

    "DefinitionValue": {
      "description": "Represents a concrete type definition",
      "oneOf": [
        {
          "$ref": "#/definitions/ObjectType"
        },
        {
          "$ref": "#/definitions/ArrayType"
        },
        {
          "$ref": "#/definitions/CombinationType"
        }
      ]
    },
    "Definitions": {
      "description": "Schema definitions which can be reused",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/DefinitionValue"
      }
    },

    "Import": {
      "description": "Contains external definitions which are imported. The imported schemas can be used via the namespace",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },

    "EnumValue": {
      "description": "A list of possible enumeration values",
      "oneOf": [{
        "$ref": "#/definitions/StringArray"
      }, {
        "$ref": "#/definitions/NumberArray"
      }]
    },
    "ScalarValue": {
      "description": "Represents a scalar value",
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        },
        {
          "type": "boolean"
        }
      ]
    },
    "StringArray": {
      "description": "Array string values",
      "type": "array",
      "items": {
        "type": "string"
      },
      "minItems": 1
    },
    "NumberArray": {
      "description": "Array number values",
      "type": "array",
      "items": {
        "type": "number"
      },
      "minItems": 1
    },

    "Root": {
      "description": "Reference a root schema at the definitions",
      "type": "object",
      "properties": {
        "$import": {
          "$ref": "#/definitions/Import"
        },
        "definitions": {
          "$ref": "#/definitions/Definitions"
        },
        "$ref": {
          "description": "Reference to a root schema under the definitions key",
          "type": "string"
        }
      },
      "required": [
        "definitions",
        "$ref"
      ]
    }
  },
  "$ref": "#/definitions/Root"
}
