{
  "definitions": {
    "DefinitionType": {
      "description": "Base definition type",
      "type": "struct",
      "base": true,
      "properties": {
        "description": {
          "description": "",
          "type": "string"
        },
        "type": {
          "description": "",
          "type": "string"
        },
        "deprecated": {
          "description": "",
          "type": "boolean"
        }
      },
      "discriminator": "type",
      "mapping": {
        "StructDefinitionType": "struct",
        "MapDefinitionType": "map",
        "ArrayDefinitionType": "array"
      }
    },
    "StructDefinitionType": {
      "description": "A struct represents a class/structure with a fix set of defined properties",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "DefinitionType"
      },
      "properties": {
        "parent": {
          "description": "Defines a parent type, all properties from the parent type are inherited",
          "type": "reference",
          "target": "ReferencePropertyType"
        },
        "base": {
          "description": "Indicates whether this is a base structure, default is false. If true the structure is used a base type, this means it is not possible to create an instance from this structure",
          "type": "boolean"
        },
        "properties": {
          "description": "Contains a map of available properties for this struct",
          "type": "map",
          "schema": {
            "type": "reference",
            "target": "PropertyType"
          }
        },
        "discriminator": {
          "description": "Optional the property name of a discriminator property. This should be only used in case this is also a base structure",
          "type": "string"
        },
        "mapping": {
          "description": "In case a discriminator is configured it is required to configure a mapping. The mapping is a map where the key is the type name (a key from the definitions map) and the value the actual discriminator type value",
          "type": "map",
          "schema": {
            "type": "string"
          }
        }
      }
    },
    "CollectionDefinitionType": {
      "description": "Base collection type",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "DefinitionType"
      },
      "base": true,
      "properties": {
        "type": {
          "description": "",
          "type": "string"
        },
        "schema": {
          "description": "",
          "type": "reference",
          "target": "PropertyType"
        }
      },
      "discriminator": "type",
      "mapping": {
        "MapDefinitionType": "map",
        "ArrayDefinitionType": "array"
      }
    },
    "MapDefinitionType": {
      "description": "Represents a map which contains a dynamic set of key value entries of the same type",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "CollectionDefinitionType"
      }
    },
    "ArrayDefinitionType": {
      "description": "Represents an array which contains a dynamic list of values of the same type",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "CollectionDefinitionType"
      }
    },
    "PropertyType": {
      "description": "Base property type",
      "type": "struct",
      "base": true,
      "properties": {
        "description": {
          "description": "",
          "type": "string"
        },
        "type": {
          "description": "",
          "type": "string"
        },
        "deprecated": {
          "description": "",
          "type": "boolean"
        },
        "nullable": {
          "description": "",
          "type": "boolean"
        }
      },
      "discriminator": "type",
      "mapping": {
        "StringPropertyType": "string",
        "IntegerPropertyType": "integer",
        "NumberPropertyType": "number",
        "BooleanPropertyType": "boolean",
        "MapPropertyType": "map",
        "ArrayPropertyType": "array",
        "AnyPropertyType": "any",
        "GenericPropertyType": "generic",
        "ReferencePropertyType": "reference"
      }
    },
    "ScalarPropertyType": {
      "description": "Base scalar property type",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "PropertyType"
      },
      "base": true,
      "properties": {
        "type": {
          "description": "",
          "type": "string"
        }
      },
      "discriminator": "type",
      "mapping": {
        "StringPropertyType": "string",
        "IntegerPropertyType": "integer",
        "NumberPropertyType": "number",
        "BooleanPropertyType": "boolean"
      }
    },
    "StringPropertyType": {
      "description": "Represents a string value",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "ScalarPropertyType"
      },
      "properties": {
        "format": {
          "description": "Optional describes the format of the string. Supported are the following types: date, date-time and time. A code generator may use a fitting data type to represent such a format, if not supported it should fallback to a string",
          "type": "string"
        }
      }
    },
    "IntegerPropertyType": {
      "description": "Represents an integer value",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "ScalarPropertyType"
      }
    },
    "NumberPropertyType": {
      "description": "Represents a float value",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "ScalarPropertyType"
      }
    },
    "BooleanPropertyType": {
      "description": "Represents a boolean value",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "ScalarPropertyType"
      }
    },
    "CollectionPropertyType": {
      "description": "Base collection property type",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "PropertyType"
      },
      "base": true,
      "properties": {
        "type": {
          "description": "",
          "type": "string"
        },
        "schema": {
          "description": "",
          "type": "reference",
          "target": "PropertyType"
        }
      },
      "discriminator": "type",
      "mapping": {
        "MapPropertyType": "map",
        "ArrayPropertyType": "array"
      }
    },
    "MapPropertyType": {
      "description": "Represents a map which contains a dynamic set of key value entries of the same type",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "CollectionPropertyType"
      }
    },
    "ArrayPropertyType": {
      "description": "Represents an array which contains a dynamic list of values of the same type",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "CollectionPropertyType"
      }
    },
    "AnyPropertyType": {
      "description": "Represents an any value which allows any kind of value",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "PropertyType"
      }
    },
    "GenericPropertyType": {
      "description": "Represents a generic value which can be replaced with a concrete type",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "PropertyType"
      },
      "properties": {
        "name": {
          "description": "The name of the generic, it is recommended to use common generic names like T or TValue. These generics can then be replaced on usage with a concrete type through the template property at a reference",
          "type": "string"
        }
      }
    },
    "ReferencePropertyType": {
      "description": "Represents a reference to a definition type",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "PropertyType"
      },
      "properties": {
        "target": {
          "description": "The target type, this must be a key which is available at the definitions map",
          "type": "string"
        },
        "template": {
          "description": "A map where the key is the name of the generic and the value must point to a key under the definitions keyword. This can be used in case the target points to a type which contains generics, then it is possible to replace those generics with a concrete type",
          "type": "map",
          "schema": {
            "type": "string"
          }
        }
      }
    },
    "TypeSchema": {
      "description": "TypeSchema specification",
      "type": "struct",
      "properties": {
        "import": {
          "description": "Allows to import other TypeSchema documents. It contains a map where the key is the namespace and the value points to a remote document. The value is a URL and a code generator should support at least the following schemes: file, http, https",
          "type": "map",
          "schema": {
            "type": "string"
          }
        },
        "definitions": {
          "description": "",
          "type": "map",
          "schema": {
            "type": "reference",
            "target": "DefinitionType"
          }
        },
        "root": {
          "description": "Specifies the root type of your specification",
          "type": "string"
        }
      }
    }
  },
  "root": "TypeSchema"
}